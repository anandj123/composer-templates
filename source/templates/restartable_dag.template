import airflow
from datetime import datetime
from airflow.models import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.models import Variable
from airflow.operators.python_operator import PythonOperator
from airflow.exceptions import AirflowSkipException
{%- for n in range(config_data['tasks']|length) %}
from {{ '.'.join(config_data['tasks'][n]['task_type'].split('.')[0:-1]) }} import {{ '.'.join(config_data['tasks'][n]['task_type'].split('.')[-1:]) }} 
{%- endfor %}

dag = DAG(
    dag_id='{{ config_data['dag_name'] }}',
    {%- if config_data['schedule_interval'] == 'None' %}
    schedule_interval={{ config_data['schedule_interval'] }},
    {%- else %}
    schedule_interval='{{ config_data['schedule_interval'] }}',
    {%- endif %}
    start_date=airflow.utils.dates.days_ago(0)
)

with dag:

    {%- for n in range(config_data['tasks']|length) %}

    def {{ config_data['tasks'][n]['task_id'] }}(**kwargs):
        if int(kwargs['current_task']) >= int(kwargs['start_task']):
            {{ config_data['tasks'][n]['task_id'] }} = {{ config_data['tasks'][n]['task_type'] }} (
                    {%- for key in config_data['tasks'][n].keys() %}
                    {%- if key != 'task_type' %}
                        {%- if config_data['tasks'][n][key] is string  %}
                            {{ key }} = '{{ config_data['tasks'][n][key] }}',
                        {%- else %}
                            {{ key }} = {{ config_data['tasks'][n][key] }},
                        {%- endif %}
                    {%- endif %}
                    {%- endfor %}
                        trigger_rule='none_failed')
            {{ config_data['tasks'][n]['task_id'] }}.execute(kwargs) 
        else:
            raise AirflowSkipException
    {%- endfor %}


    start_task = Variable.get('{{ config_data['dag_name'] }}_start_step',default_var='1')    
    start = DummyOperator(task_id='start')

    {%- set item = namespace(value='start') %}

    current_task = 1

    {%- for n in range(config_data['tasks']|length) %}
    {{ config_data['tasks'][n]['task_id'] }} = PythonOperator(
                                task_id='{{ config_data['tasks'][n]['task_id'] }}',
                                provide_context=True,
                                python_callable={{ config_data['tasks'][n]['task_id'] }},
                                trigger_rule='none_failed',
                                op_kwargs={'current_task': current_task,'start_task': start_task}
                               )
    current_task += 1
    {%- set item.value = item.value + ' >> ' + config_data['tasks'][n]['task_id'] %}

    {%- endfor %}

    {{ item.value }}