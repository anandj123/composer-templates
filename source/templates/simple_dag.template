import airflow
from datetime import datetime
from airflow.models import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.contrib.operators.gcs_to_bq import GoogleCloudStorageToBigQueryOperator
from airflow.providers.google.cloud.operators.bigquery import BigQueryInsertJobOperator
from airflow.operators.bash_operator import BashOperator

dag = DAG(
    dag_id='{{ config_data['dag_name'] }}',
{%-    if config_data['schedule_interval'] == 'None' %}
    schedule_interval={{ config_data['schedule_interval'] }},
{%- else %}
    schedule_interval='{{ config_data['schedule_interval'] }}',
{%- endif %}
    start_date=airflow.utils.dates.days_ago(0),
    catchup=False,
)

with dag:
    start = DummyOperator(
        task_id='start',
        dag=dag
    )


{%- set item = namespace(value='start') %}

{%- for n in range(config_data['tasks']|length) %}

{%-    if config_data['tasks'][n]['task_type'] == 'gcs_to_bigquery' %}
    {{ config_data['tasks'][n]['task_id'] }} = GoogleCloudStorageToBigQueryOperator(
         task_id='{{ config_data['tasks'][n]['task_id'] }}',
         bucket='{{ config_data['tasks'][n]['bucket'] }}',
         source_objects={{ config_data['tasks'][n]['source_objects'] }},
         destination_project_dataset_table='{{ config_data['tasks'][n]['destination_project_dataset_table'] }}',
         write_disposition='{{ config_data['tasks'][n]['write_disposition'] }}')
{%-    set item.value = item.value + ' >> ' + config_data['tasks'][n]['task_id'] %}
{%- endif %}

{%-    if config_data['tasks'][n]['task_type'] == 'bigquery_stored_procedure' %}
    {{ config_data['tasks'][n]['task_id'] }} = BigQueryInsertJobOperator(
         task_id='{{ config_data['tasks'][n]['task_id'] }}',
         configuration={"query": {
                        "query": "call {{ config_data['tasks'][n]['stored_procedure_name'] }}",
                        "useLegacySql": False,
                       }})
{%-    set item.value = item.value + ' >> ' + config_data['tasks'][n]['task_id'] %}
{%- endif %}

{%-    if config_data['tasks'][n]['task_type'] == 'bas_operator' %}
    {{ config_data['tasks'][n]['task_id'] }} = BashOperator(
         task_id='{{ config_data['tasks'][n]['task_id'] }}',
         bash_command='{{ config_data['tasks'][n]['bash_command'] }}')
{%-    set item.value = item.value + ' >> ' + config_data['tasks'][n]['task_id'] %}
{%- endif %}

{%- endfor %}

    {{ item.value }}